---
title: "procesamiento 2"
author: "Maria Candelaria Dorta Delgado - Andres Felipe Beltran"
date: "4/13/2021"
output: 
 rmdformats::downcute
---

En este documento revisaremos como organizar y preparar los archivos para el promediado. En esta carpeta solo hay archivos con la extension `.csv` que contienen espectros de muestras que necesitan ser promediadios.

```{r}
nombres <- list.files(, pattern = 'CSV')
nombres
```
```{r}
48/3
```

Ahora leemos los espectros:

```{r}
data <- lapply(nombres, read.csv, header = FALSE)
```

```{r}
str(data[[1]])
```
```{r}
wavenumber <- data[[1]][,1]
```

```{r}
data2 <- lapply(data, '[', 2)
```

```{r}
data2 <- as.data.frame(data2)
dim(data2)
names(data2) <- nombres
```
```{r}
datat <- t(data2)
colnames(datat) <- wavenumber
```



```{r}


set.seed(0)

searchGrid <-  expand.grid(Temperature = c('Room T','50C'),
                         Time = c('2 min', '4 min' , '6 min', '8 min'),
                         Treatment =c('A','B'))

rownames.prom <- character(16)

for (i in 1:16){
rownames.prom[i] <- paste(searchGrid[i,1],searchGrid[i,2],searchGrid[i,3])  
  
}
prom <- matrix(, 
               ncol= ncol(datat), 
               nrow = nrow(datat)/3)
index <- vector('list',16)

for(i in 1:16){
  
  index[[i]] <- c(which(grepl(paste0('(?=.*',
                                      as.character(searchGrid[i,1]),
                                      ')(?=.*',
                                      as.character(searchGrid[i,2]),
                                      ')(?=.*',
                                       as.character(searchGrid[i,3]),
                                      ')'
                                        ) ,
                              rownames(datat), 
                              perl = T))
                  )
  
for(j in 1:length(colnames(datat))){
  


prom[i,j] <- mean(c(datat[index[[i]][1],j],
                    datat[index[[i]][2],j],
                    datat[index[[i]][3],j]
                      ) )

}
}
rownames(prom) <- rownames.prom
colnames(prom) <- wavenumber
 
```


Podemos graficar los promedios:

```{r}
for(i in 1:length(rownames(prom))){
  plot(wavenumber,
      prom[i,],
       xlab = 'wave number cm-1',
       ylab = 'absorbance a.u.',
       xlim = c(1700,400),
       ylim = c(0,0.18),
       type = 'l')
  par(new = T)
  
  
}
```

Luego de guardar en una tabla los promedios de esta segunda parte:

```{r}
write.table(prom,'promedios2.txt', sep = '\t')
```




Podemos importar los espectros de la primera parte ya promediados para analizar todo en conjunto:


```{r}
promedios1 <- read.table('promedios1.txt', sep = '\t', header = T)
```

```{r}
dim(promedios1)
```
```{r}
library(tibble)

promedios1 <- column_to_rownames(promedios1 , var = 'X')
dim(promedios1)
dim(prom)
colnames(promedios1) <- colnames(prom)
promediosTotal <- rbind(prom,promedios1)
promediosTotal <- promediosTotal[-1869]



```

# Seleccion de rango


```{r}
Rango1 <- promediosTotal[,1:676]
wn.Rango1 <- wavenumber[1:676]
head(colnames(Rango1))
tail(colnames(Rango1))
write.table(promediosTotal, 'promediosCandi.txt', sep = '\t')
```

# Estimacion y correccion de lineas base del nuevo rango

Es posible estimar las lineas base mediante el metodo `rubberband` del paquete `hyperspec`.


```{r, message=FALSE}
library(hyperSpec)

spc <- new('hyperSpec', spc = Rango1, wavelength = wn.Rango1)
bend <- 0.1 * wl.eval (spc, function (x) x^6+x^5+x^4+x^3+x^2, normalize.wl=normalize01)

bl <- spc.rubberband (spc+bend, noise = 1e-4, df=20)-bend
suma <- spc+bend
spc3 <- spc - bl

plot(spc, wl.reverse = TRUE)
plot(bl, add=TRUE, col=2,wl.reverse = TRUE)

plot(suma,wl.reverse = TRUE)
plot(bend, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3,wl.reverse = TRUE)

corregido <- as.data.frame(spc3[1:31])
corregido2 <- as.data.frame(corregido[,1])
```
# Creación de clases para visualizacion

Aqui vamos a crear clases segun tres parametros: Temperatura de lavado, tiempo de molienda (proporcional al tamaño de partícula) y seccion de toma de muestra en el tubo de centrifugado.

Primero, creamos un vector vacio que va a contener las clases de cada muestra:

```{r}
class <- vector('character', length = length(rownames(corregido2)))
str(class)
```
Ahora, utilizando las estructuras de control de flujo `if` y `else`, en conjunto con la funcion de emparejamiento de patrones y reemplazo `grepl` podemos, a partir de los nombres de las muestras crear clases para la correcta visualizacion de los datos.

Primero la clase que corresponde a la parte del tubo que se toma la muestra, que esta diferenciada de manera que los espectros que se cargaron de la carpeta anterior, contenidos en el objeto `promedios1`, que conservan un `@` en su nombre original, son de la parte ___ del tubo y llevan el color negro. 

Aquellos que fueron suministrados por segunda vez, y estan guardados en la carpeta que contiene este informe, no contienen el `@` en su nombre debido al algoritmo de selección descrito anteriormente, corresponden a la parte ____ del tubo y llevan el color rojo.


```{r}
for(i in 1:length(rownames(corregido2)))
{

    if(
      grepl('(?=.*@)', rownames(corregido2)[i], perl = T)
    ) {class[i] <- 'black'}else{
        class[i] <- 'red'
}
}
class

rownames(corregido2)

```

```{r}

# win.graph()
for(i in 1:length(rownames(corregido2))){
  plot(wn.Rango1,
       corregido2[i,],
       xlab = 'wave number cm-1',
       ylab = 'absorbance a.u.',
       xlim = c(1700,400),
       ylim = c(0,0.18),
       type = 'l',
       col = class[i])
  par(new = T)
  
  
}
legend('topleft',
       c('Lower fraction','Upper fraction'),
       col = c('red','black'),
       lty = 1)

```

# Hierarchical clustering

```{r}
df <- corregido2
library(factoextra)
res.hk <-hkmeans(df, 
                 4,
                 hc.metric =  'minkowski')
names(res.hk)

```
```{r}
fviz_dend(res.hk, cex = 0.6, palette = "jco", 
          rect = TRUE, rect_border = "jco", rect_fill = TRUE)
```


# PCA despues de correccion de linea base del nuevo rango
```{r}

pca.bl <- prcomp(corregido2, scale =F, center = T)
vp.bl <- (pca.bl$sdev)^2
varianza.bl <- round(vp.bl/sum(vp.bl)*100, 2)
varianza.bl
```

```{r}
coord.bl <- pca.bl$x

```


También podemos diferenciar las muestras por el tiempo de molienda, y a su vez por temperatura


```{r}
pch <- vector('numeric', length = length(rownames(coord.bl)))
pchvalues <- c(16,1,17,2,15,0,18,5)
indexpch <- vector('list',8)

for(i in 1:8){
  
  indexpch[[i]] <- c(which(grepl(paste0('(?=.*',
                                      as.character(searchGrid[i,1]),
                                      ')(?=.*',
                                      as.character(searchGrid[i,2]),
                                      ')'
                                        ) ,
                              rownames(coord.bl), 
                              perl = T))
                  )
}


  for(j in 1:8){
    

     
     pch[indexpch[[j]]] <- pchvalues[j]
     
    
  }

```


Ahora tenemos como identificar los espectros por zona de muestreo:

```{r}
plot(coord.bl[,1],
     coord.bl[,2],
     pch = pch,
     xlab = paste('PC 1 -',as.character(varianza.bl[1]), '%'),
     ylab = paste('PC 2 -',as.character(varianza.bl[2]), '%'),
     col = class
   
     )
     


abline(h = 0, v = 0, lty= 2)
```

Para 

# 3D visualization


```{r echo = FALSE}
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) { 
  if( new.device | rgl.cur() == 0 ) {
    rgl.open()
    par3d(windowRect = 50 + c( 0, 0, width, width ) )
    rgl.bg(color = bg )
  }
  rgl.clear(type = c("shapes", "bboxdeco"))
  rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl_add_axes <- function(x, y, z, axis.col = "black",#52.20 42.79  3.75
                xlab =  paste('PC 1 -',as.character(varianza.bl[1]), '%'), 
                ylab=paste('PC 2 -',as.character(varianza.bl[2]), '%'), 
                zlab=paste('PC 3 -',as.character(varianza.bl[3]), '%'), 
                
                
                show.plane = FALSE, 
                show.bbox = TRUE, bbox.col = c("white","black"))
  { 
  
  lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
  # Add axes
  xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
  rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
  
   # Add a point at the end of each axes to specify the direction
   axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0), 
                 c(0, 0, zlim[2]))
   rgl.points(axes, color = axis.col, size = 3)
  
  # Add axis labels
  rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
             adj = c(0.5, -0.8), size = 2)
  
  # # Add plane
  # if(show.plane) 
  #   xlim <- xlim/1.1; zlim <- zlim /1.1
  #   rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
  #            z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
  
  # Add bounding box decoration
  if(show.bbox){
    rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5, 
          emission=bbox.col[1], specular=bbox.col[1], shininess=5, 
          xlen = 3, ylen = 3, zlen = 3) 
  }
}
```


```{r echo=FALSE}
options(rgl.useNULL=TRUE) # for Rstudio versions older than 1.2
```


```{r setup0, echo=FALSE}
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl) # To Embed an interactive 3D plot with rgl
```

```{r  webgl=TRUE, results='hide'}
library(rgl)
x  <- coord.bl[,1]
y  <- coord.bl[,2]
z  <- coord.bl[,3]
# here i make new vectors from the first 3 principal components in order to use them in graphical functions



rgl_init()
r3dDefaults$windowRect <- c(0,50, 1200, 1200)
rgl.spheres(x, y, z, r = 0.03, color =class)
rgl_add_axes(x, y, z, show.bbox = FALSE)
text3d(x,y+0.01,z, rownames(coord.bl), col="black", pos=3, cex = 0.07)
aspect3d(1,1,1)
# browseURL(
#   paste("file://", writeWebGL(dir=file.path(tempdir(), "webGL"), 
#   width=800), sep="")
#   )



```

# derivatizacion de espectros
```{r}
library(prospectr)

w2 <- 40
sg <- matrix(ncol = ncol(corregido2)-w2, nrow= nrow(corregido2))

sg <- as.data.frame(sg) 
# for (i in 1:31){

sg<- savitzkyGolay(X = corregido2
                        ,m = 2,
                        p = 3,
                        w = w2+1,
                        delta.wav=2)
# }
# colnames(sg) <- colnames( savitzkyGolay(X = corregido2[1,]
#                         ,m = 2,
#                         p = 3,
#                         w = w2+1,
#                         delta.wav=2))
rownames(sg) <- rownames(corregido2)

win.graph()

for(i in 1:length(rownames(sg))){
  
  plot(as.numeric(colnames(sg)),
       sg[i,],
       xlab = 'wave number cm-1',
       ylab = '2nd derivative of abs',
       xlim = c(1700,400),
        ylim = c(-1e-04,1e-04),
       type = 'l',
       col = class[i])
  par(new = T)
  
  
}

legend('topleft',
       c('Lower fraction','Upper fraction'),
       col = c('red','black'),
       lty = 1)
```

# Analisis multivariado de la segunda derivada

# Analisis jerarquico

```{r}
df.sg <- sg
library(factoextra)
res.hk.sg <-hkmeans(df.sg, 
                 4,
                 hc.metric =  'minkowski')
names(res.hk.sg)
```


```{r}
fviz_dend(res.hk.sg, cex = 0.6, palette = "jco", 
          rect = TRUE, rect_border = "jco", rect_fill = TRUE,  ylim = c(-0.001, 0.001))
```


```{r}
pca.bl.2d <- prcomp(sg, scale=T, center = T)

vp.bl.2d <- (pca.bl.2d$sdev)^2
varianza.bl.2d <- round(vp.bl.2d/sum(vp.bl.2d)*100, 2)
varianza.bl.2d


coord.bl.2d <- pca.bl.2d$x
x  <- coord.bl.2d[,1]
y  <- coord.bl.2d[,2]
z  <- coord.bl.2d[,3]

x1 <- x[class=='red']
y1 <- y[class=='red']
z1 <- z[class=='red']

x2 <- x[class=='black']
y2 <- y[class=='black']
z2 <- z[class=='black']

plot(coord.bl.2d[,1],
     coord.bl.2d[,2],
     pch = 19,
     xlab = paste('PC 1 -',as.character(varianza.bl.2d[1]), '%'),
     ylab = paste('PC 2 -',as.character(varianza.bl.2d[2]), '%'),
     col = class
     )
  library(car)
ellipse(c(mean(x1),mean(y1)),
        cov(cbind(x1,y1)),
        radius= sqrt(qnorm(.95)), 
        col="red",
        center.pch=FALSE,
        add=TRUE,
        # levels=0.95,
        fill=TRUE,
        lwd=0.8,
        
) 
ellipse(c(mean(x2),mean(y2)),
        cov(cbind(x2,y2)),
        radius= sqrt(qnorm(.95)), 
        col="black",
        center.pch=FALSE,
        add=TRUE,
        # levels=0.95,
        fill=TRUE,
        lwd=0.8,
        
) 
   

abline(h = 0, v = 0, lty= 2)
```

```{r  webgl=TRUE, results='hide'}

rgl_add_axes <- function(x, y, z, axis.col = "black",#52.20 42.79  3.75
                xlab =  paste('PC 1 -',as.character(varianza.bl.2d[1]), '%'), 
                ylab=paste('PC 2 -',as.character(varianza.bl.2d[2]), '%'), 
                zlab=paste('PC 3 -',as.character(varianza.bl.2d[3]), '%'), 
                
                
                show.plane = FALSE, 
                show.bbox = TRUE, bbox.col = c("white","black"))
  { 
  
  lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
  # Add axes
  xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
  rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
  
   # Add a point at the end of each axes to specify the direction
   axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0), 
                 c(0, 0, zlim[2]))
   rgl.points(axes, color = axis.col, size = 3)
  
  # Add axis labels
  rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
             adj = c(0.5, -0.8), size = 2)
  
  # # Add plane
  # if(show.plane) 
  #   xlim <- xlim/1.1; zlim <- zlim /1.1
  #   rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
  #            z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
  
  # Add bounding box decoration
  if(show.bbox){
    rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5, 
          emission=bbox.col[1], specular=bbox.col[1], shininess=5, 
          xlen = 3, ylen = 3, zlen = 3) 
  }
}



library(rgl)
rgl_init()         
r3dDefaults$windowRect <- c(0,50, 1200, 1200) 
rgl.spheres(x, y, z, r = 0.5, color = class) 
# text3d(x,y,z, rownames(coord), pos=3, col="black")
rgl_add_axes(x, y, z, show.bbox = FALSE)
aspect3d(1,1,1)

ellips1 <- ellipse3d(cov(cbind(x1,y1,z1)), 
                     centre=c(mean(x1), 
                              mean(y1), 
                              mean(z1)), 
                     level = 0.95)
shade3d(ellips1, col = "red", alpha=0.15, lit = FALSE)

ellips2 <- ellipse3d(cov(cbind(x2,y2,z2)), 
                     centre=c(mean(x2), 
                              mean(y2), 
                              mean(z2)), 
                     level = 0.95)
shade3d(ellips2, col = "black", alpha=0.15, lit = FALSE)



```



# Referencias


* Lin, S. Y., & Dence, C. W. (Eds.). (2012). Methods in lignin chemistry. Springer Science & Business Media.